
window.projectVersion = 'master';

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeHtml = '        <ul>                <li data-name="namespace:eureka2" class="opened">                    <div style="padding-left:0px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2.html">eureka2</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:eureka2_OAuth" class="opened">                    <div style="padding-left:18px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth.html">OAuth</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="namespace:eureka2_OAuth_Client" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Client.html">Client</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Client_AbstractOAuthClient" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/AbstractOAuthClient.html">AbstractOAuthClient</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OAuth1Client" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OAuth1Client.html">OAuth1Client</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OAuth2Client" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OAuth2Client.html">OAuth2Client</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OAuthClientFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OAuthClientFactory.html">OAuthClientFactory</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OAuthClientInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OAuthClientInterface.html">OAuthClientInterface</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OAuthClientStrategy" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OAuthClientStrategy.html">OAuthClientStrategy</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OpenIDClient" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OpenIDClient.html">OpenIDClient</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Client_OpenIDClientInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Client/OpenIDClientInterface.html">OpenIDClientInterface</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Exception" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Exception.html">Exception</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Exception_OAuthClientAccessTokenException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Exception/OAuthClientAccessTokenException.html">OAuthClientAccessTokenException</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Exception_OAuthClientAuthorizationException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Exception/OAuthClientAuthorizationException.html">OAuthClientAuthorizationException</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Exception_OAuthClientException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Exception/OAuthClientException.html">OAuthClientException</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Exception_OAuthClientPHPException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Exception/OAuthClientPHPException.html">OAuthClientPHPException</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Exception_OAuthClientSignatureException" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Exception/OAuthClientSignatureException.html">OAuthClientSignatureException</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Provider" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Provider.html">Provider</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Provider_OAuthBuiltinProviders" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Provider/OAuthBuiltinProviders.html">OAuthBuiltinProviders</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Provider_OAuthProvider" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Provider/OAuthProvider.html">OAuthProvider</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Request" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Request.html">Request</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Request_OAuthRequest" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Request/OAuthRequest.html">OAuthRequest</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Response" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Response.html">Response</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Response_OAuthResponse" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Response/OAuthResponse.html">OAuthResponse</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Response_ResourceOwner" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Response/ResourceOwner.html">ResourceOwner</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Storage" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Storage.html">Storage</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Storage_AbstractTokenStorage" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/AbstractTokenStorage.html">AbstractTokenStorage</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_ApcuTokenStorage" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/ApcuTokenStorage.html">ApcuTokenStorage</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_CookieTokenStorage" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/CookieTokenStorage.html">CookieTokenStorage</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_OAuthSession" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/OAuthSession.html">OAuthSession</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_PdoTokenStorage" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/PdoTokenStorage.html">PdoTokenStorage</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_SessionTokenStorage" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/SessionTokenStorage.html">SessionTokenStorage</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_TokenStorageFactory" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/TokenStorageFactory.html">TokenStorageFactory</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_TokenStorageInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/TokenStorageInterface.html">TokenStorageInterface</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Storage_TokenStorageManagementInterface" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Storage/TokenStorageManagementInterface.html">TokenStorageManagementInterface</a>                    </div>                </li>                </ul></div>                </li>                            <li data-name="namespace:eureka2_OAuth_Token" class="opened">                    <div style="padding-left:36px" class="hd">                        <span class="glyphicon glyphicon-play"></span><a href="eureka2/OAuth/Token.html">Token</a>                    </div>                    <div class="bd">                                <ul>                <li data-name="class:eureka2_OAuth_Token_AccessToken" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Token/AccessToken.html">AccessToken</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Token_IdToken" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Token/IdToken.html">IdToken</a>                    </div>                </li>                            <li data-name="class:eureka2_OAuth_Token_JWT" >                    <div style="padding-left:62px" class="hd leaf">                        <a href="eureka2/OAuth/Token/JWT.html">JWT</a>                    </div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul></div>                </li>                </ul>';

    var searchTypeClasses = {
        'Namespace': 'label-default',
        'Class': 'label-info',
        'Interface': 'label-primary',
        'Trait': 'label-success',
        'Method': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
                    
            {"type": "Namespace", "link": "eureka2.html", "name": "eureka2", "doc": "Namespace eureka2"},{"type": "Namespace", "link": "eureka2/OAuth.html", "name": "eureka2\\OAuth", "doc": "Namespace eureka2\\OAuth"},{"type": "Namespace", "link": "eureka2/OAuth/Client.html", "name": "eureka2\\OAuth\\Client", "doc": "Namespace eureka2\\OAuth\\Client"},{"type": "Namespace", "link": "eureka2/OAuth/Exception.html", "name": "eureka2\\OAuth\\Exception", "doc": "Namespace eureka2\\OAuth\\Exception"},{"type": "Namespace", "link": "eureka2/OAuth/Provider.html", "name": "eureka2\\OAuth\\Provider", "doc": "Namespace eureka2\\OAuth\\Provider"},{"type": "Namespace", "link": "eureka2/OAuth/Request.html", "name": "eureka2\\OAuth\\Request", "doc": "Namespace eureka2\\OAuth\\Request"},{"type": "Namespace", "link": "eureka2/OAuth/Response.html", "name": "eureka2\\OAuth\\Response", "doc": "Namespace eureka2\\OAuth\\Response"},{"type": "Namespace", "link": "eureka2/OAuth/Storage.html", "name": "eureka2\\OAuth\\Storage", "doc": "Namespace eureka2\\OAuth\\Storage"},{"type": "Namespace", "link": "eureka2/OAuth/Token.html", "name": "eureka2\\OAuth\\Token", "doc": "Namespace eureka2\\OAuth\\Token"},
            {"type": "Interface", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface", "doc": "&quot;interface OAuthClientInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_initialize", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::initialize", "doc": "&quot;Initialize the class variables and internal state. It must\nbe called before calling other class functions.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_authenticate", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::authenticate", "doc": "&quot;Process the OAuth protocol interaction with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_callAPI", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::callAPI", "doc": "&quot;Send a HTTP request to the Web services API using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getResourceOwner", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getResourceOwner", "doc": "&quot;Returns the information about the resource owner using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_fetchResourceOwner", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::fetchResourceOwner", "doc": "&quot;Returns the information about the resource owner.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_finalize", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::finalize", "doc": "&quot;Cleanup any resources that may have been used during the\nOAuth protocol processing or execution of API calls.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_checkAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::checkAccessToken", "doc": "&quot;Check if the access token was retrieved and if it is valid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_canRevokeToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::canRevokeToken", "doc": "&quot;Determines whether the revokeToken function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_revokeToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::revokeToken", "doc": "&quot;Revoke a previously obtained token so it becomes invalid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_canLogOut", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::canLogOut", "doc": "&quot;Determines whether the logOut function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_logOut", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::logOut", "doc": "&quot;Calls the end-session endpoint to notify the provider\nthat the end-user has logged out of the relying party site.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_shouldExit", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::shouldExit", "doc": "&quot;Determine if the current script should be exited.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getAccessToken", "doc": "&quot;Returns the obtained access token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getRefreshToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getRefreshToken", "doc": "&quot;Returns the obtained refresh token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getIdToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getIdToken", "doc": "&quot;Returns the obtained ID token upon\nsuccessful OpenID authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getProvider", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getProvider", "doc": "&quot;Returns the current instance\nof the OAuthProvider class.&quot;"},
            
            {"type": "Interface", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OpenIDClientInterface.html", "name": "eureka2\\OAuth\\Client\\OpenIDClientInterface", "doc": "&quot;This interface completes the OAuthClient interface for the OpenID protocol.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OpenIDClientInterface", "fromLink": "eureka2/OAuth/Client/OpenIDClientInterface.html", "link": "eureka2/OAuth/Client/OpenIDClientInterface.html#method_introspectToken", "name": "eureka2\\OAuth\\Client\\OpenIDClientInterface::introspectToken", "doc": "&quot;Determines the active state of a token\nand the meta-information about this token.&quot;"},
            
            {"type": "Interface", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "doc": "&quot;interface TokenStorageInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_storeAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::storeAccessToken", "doc": "&quot;Store the values of the access token when it is succefully\nretrieved from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredAccessToken", "doc": "&quot;Retrieve the OAuth access token if it was already previously stored by the\nstoreAccessToken method.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredState", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredState", "doc": "&quot;Returns the stored state&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredNonce", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredNonce", "doc": "&quot;Returns the stored nonce&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_storeUserid", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::storeUserid", "doc": "&quot;Stores the user ID returned by the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredUserId", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredUserId", "doc": "&quot;Returns the stored user ID&quot;"},
            
            {"type": "Interface", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "doc": "&quot;interface TokenStorageManagementInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
            
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "doc": "&quot;&lt;h2&gt;Base class for all Oauth clients :&lt;\/h2&gt;\n&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method___construct", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::__construct", "doc": "&quot;Constructs an OAuth client object for the given provider name&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_isDebug", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::isDebug", "doc": "&quot;Determines whether debug output is enabled or not&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_isDebugHttp", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::isDebugHttp", "doc": "&quot;Determines whether the dialog with the remote Web server\nshould also be logged or not.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_shouldExit", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::shouldExit", "doc": "&quot;Determine if the current script should be exited.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAccessToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAccessToken", "doc": "&quot;Returns the obtained access token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAccessTokenSecret", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAccessTokenSecret", "doc": "&quot;Returns the access token secret obtained from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAccessTokenExpiry", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAccessTokenExpiry", "doc": "&quot;Returns the timestamp of the expiry of the access token obtained from\nthe OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAccessTokenType", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAccessTokenType", "doc": "&quot;Returns the type of access token obtained from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAccessTokenResponse", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAccessTokenResponse", "doc": "&quot;Returns the original response for the access token request&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRefreshToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRefreshToken", "doc": "&quot;Returns the obtained refresh token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getIdToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getIdToken", "doc": "&quot;Returns the obtained ID token upon\nsuccessful OpenID authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResponseStatus", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResponseStatus", "doc": "&quot;Returns the HTTP response status returned by the server when calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResponseHeaders", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResponseHeaders", "doc": "&quot;Returns the HTTP response headers returned by the server when calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResponseHeader", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResponseHeader", "doc": "&quot;Returns the HTTP response header value returned by the server when calling an API\nfor a given header name.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResponseBody", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResponseBody", "doc": "&quot;Returns the HTTP response body returned by the server when calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getOauthUserAgent", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getOauthUserAgent", "doc": "&quot;Returns the User-Agent used in HTTP requests.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResponseTime", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResponseTime", "doc": "&quot;Returns the time of the response of the HTTP request.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getProvider", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getProvider", "doc": "&quot;Returns the current instance\nof the OAuthProvider class.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setDebug", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setDebug", "doc": "&quot;Enables or disables the debug mode.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setDebugHttp", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setDebugHttp", "doc": "&quot;Enables or disables logging of the dialog with the remote Web server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setLogFileName", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setLogFileName", "doc": "&quot;Sets the name of the file to store log messages.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setExit", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setExit", "doc": "&quot;Determines if the current script should be exited.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setRedirectUri", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setRedirectUri", "doc": "&quot;Sets the URL of the current script page that is calling this class.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setClientId", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setClientId", "doc": "&quot;Sets the identifier of your application registered with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setClientSecret", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setClientSecret", "doc": "&quot;Sets the secret value assigned to your application.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setAccessToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setAccessToken", "doc": "&quot;Sets access token obtained from the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setAccessTokenSecret", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setAccessTokenSecret", "doc": "&quot;Sets the access token secret obtained from the OAuth 1.0 or 1.0a provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setAccessTokenExpiry", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setAccessTokenExpiry", "doc": "&quot;Sets the timestamp of the expiry of the access token obtained from\nthe OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setAccessTokenType", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setAccessTokenType", "doc": "&quot;Sets the type of access token obtained from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setAccessTokenResponse", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setAccessTokenResponse", "doc": "&quot;Sets the original response for the access token request.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setRefreshToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setRefreshToken", "doc": "&quot;Sets the refresh token obtained from the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setIdToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setIdToken", "doc": "&quot;Sets the id_token object from OAuth servers compatible with OpenID Connect.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setResponseStatus", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setResponseStatus", "doc": "&quot;Sets the HTTP response status returned by the server when calling an  API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setResponseHeaders", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setResponseHeaders", "doc": "&quot;Sets the HTTP response headers returned by the server when calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setResponseBody", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setResponseBody", "doc": "&quot;Sets the HTTP response body returned by the server when calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setOauthUserAgent", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setOauthUserAgent", "doc": "&quot;Changes the User-Agent used in HTTP requests.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_setResponseTime", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::setResponseTime", "doc": "&quot;Sets the time of the response of the HTTP request.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_trace", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::trace", "doc": "&quot;Writes a message to the log output if debugging is enabled.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getAuthorizationEndpoint", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getAuthorizationEndpoint", "doc": "&quot;Replaces the placeholders in the URL of the authorization endpoint and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getTokenEndpoint", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getTokenEndpoint", "doc": "&quot;Replaces the placeholders in the URL of the token endpoint and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRevocationEndpoint", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRevocationEndpoint", "doc": "&quot;Replaces the placeholders in the URL of the revocation endpoint and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestState", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestState", "doc": "&quot;Returns the value of the state parameter returned by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestCode", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestCode", "doc": "&quot;Returns the value of the code returned by the authorization endpoint of the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestError", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestError", "doc": "&quot;Returns the error returned by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestDenied", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestDenied", "doc": "&quot;Returns the denied access token returned by the OAuth provider, if any.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestToken", "doc": "&quot;Returns the request token received from the OAuth 1.0(a) provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getRequestVerifier", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getRequestVerifier", "doc": "&quot;Returns the verification code received from the OAuth 1.0(a) provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_redirect", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::redirect", "doc": "&quot;Redirect the user browser to a given page.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_signRequestData", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::signRequestData", "doc": "&quot;Sign the request data in PLAINTEXT, HMAC_SHA1 or RSA_SHA1\nusing a key composed from the secret client registered with the provider\nand the oauth token secret returned by the token request endpoint.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_sendHttpRequest", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::sendHttpRequest", "doc": "&quot;Sends a HTTP request to the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_prepareOAuthRequest", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::prepareOAuthRequest", "doc": "&quot;Composes a OAuth request to be sent to the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_sendOAuthRequest", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::sendOAuthRequest", "doc": "&quot;Sends a OAuth request to the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_convertResponseBody", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::convertResponseBody", "doc": "&quot;Converts the response body of an OAuth request based on the options in the provided argument.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_isThereAStoredAccessToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::isThereAStoredAccessToken", "doc": "&quot;Checks if there is a stored access token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_isStoredAccessTokenValid", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::isStoredAccessTokenValid", "doc": "&quot;Checks if the stored access token is valid&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_callAPI", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::callAPI", "doc": "&quot;Send a HTTP request to the Web services API using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_getResourceOwner", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::getResourceOwner", "doc": "&quot;Returns the information about the resource owner using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_fetchResourceOwner", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::fetchResourceOwner", "doc": "&quot;Returns the information about the resource owner.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_checkTokenBeforeCall", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::checkTokenBeforeCall", "doc": "&quot;Checks the access token state before calling an API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_initialize", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::initialize", "doc": "&quot;Initialize the class variables and internal state. It must\nbe called before calling other class functions.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_deepMerge", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::deepMerge", "doc": "&quot;Merges two arrays recursively.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_initializeRegitrationOptions", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::initializeRegitrationOptions", "doc": "&quot;Initializes the options registered with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_discover", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::discover", "doc": "&quot;Sends a OAuth request to the discovery endpoint of the OpenID provider\nin order to obtain the configuration information, which is the list of\nall endpoints and the list of supported OAuth elements.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_checkNoToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::checkNoToken", "doc": "&quot;Checks that the authenticate method has not already been called&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_authenticate", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::authenticate", "doc": "&quot;Process the OAuth protocol interaction with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_checkAccessToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::checkAccessToken", "doc": "&quot;Check if the access token was retrieved and if it is valid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_canRevokeToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::canRevokeToken", "doc": "&quot;Determines whether the revokeToken function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_revokeToken", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::revokeToken", "doc": "&quot;Revoke a previously obtained token so it becomes invalid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_finalize", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::finalize", "doc": "&quot;Cleanup any resources that may have been used during the\nOAuth protocol processing or execution of API calls.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_canLogOut", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::canLogOut", "doc": "&quot;Determines whether the logOut function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\AbstractOAuthClient", "fromLink": "eureka2/OAuth/Client/AbstractOAuthClient.html", "link": "eureka2/OAuth/Client/AbstractOAuthClient.html#method_logOut", "name": "eureka2\\OAuth\\Client\\AbstractOAuthClient::logOut", "doc": "&quot;Calls the end-session endpoint to notify the provider\nthat the end-user has logged out of the relying party site.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html", "name": "eureka2\\OAuth\\Client\\OAuth1Client", "doc": "&quot;This class represents the OAuth client dealing with providers supporting OAuth 1.0 or OAuth 1.0a.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth1Client", "fromLink": "eureka2/OAuth/Client/OAuth1Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html#method_requestAnOAuthAccessToken", "name": "eureka2\\OAuth\\Client\\OAuth1Client::requestAnOAuthAccessToken", "doc": "&quot;Prepares and initiates the request for an access token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth1Client", "fromLink": "eureka2/OAuth/Client/OAuth1Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html#method_callAPI", "name": "eureka2\\OAuth\\Client\\OAuth1Client::callAPI", "doc": "&quot;Send a HTTP request to the Web services API using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth1Client", "fromLink": "eureka2/OAuth/Client/OAuth1Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html#method_checkAccessToken", "name": "eureka2\\OAuth\\Client\\OAuth1Client::checkAccessToken", "doc": "&quot;Check if the access token was retrieved and if it is valid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth1Client", "fromLink": "eureka2/OAuth/Client/OAuth1Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html#method_buildBaseString", "name": "eureka2\\OAuth\\Client\\OAuth1Client::buildBaseString", "doc": "&quot;Builds the base string for the signature of request data.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth1Client", "fromLink": "eureka2/OAuth/Client/OAuth1Client.html", "link": "eureka2/OAuth/Client/OAuth1Client.html#method_signRequestData", "name": "eureka2\\OAuth\\Client\\OAuth1Client::signRequestData", "doc": "&quot;Sign the request data in PLAINTEXT, HMAC_SHA1 or RSA_SHA1\nusing a key composed from the secret client registered with the provider\nand the oauth token secret returned by the token request endpoint.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html", "name": "eureka2\\OAuth\\Client\\OAuth2Client", "doc": "&quot;This class represents the OAuth client dealing with providers supporting OAuth 2.0.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_verifyClaims", "name": "eureka2\\OAuth\\Client\\OAuth2Client::verifyClaims", "doc": "&quot;Verifies the claims of an ID token and return them if they are valid&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_verifySignature", "name": "eureka2\\OAuth\\Client\\OAuth2Client::verifySignature", "doc": "&quot;Verifies the signature of an ID token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_requestAnOAuthToken", "name": "eureka2\\OAuth\\Client\\OAuth2Client::requestAnOAuthToken", "doc": "&quot;Prepares and initiates the request for an access or refresh token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_callAPI", "name": "eureka2\\OAuth\\Client\\OAuth2Client::callAPI", "doc": "&quot;Send a HTTP request to the Web services API using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_isAccessTokenExpired", "name": "eureka2\\OAuth\\Client\\OAuth2Client::isAccessTokenExpired", "doc": "&quot;Checks if an access token has expired&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuth2Client", "fromLink": "eureka2/OAuth/Client/OAuth2Client.html", "link": "eureka2/OAuth/Client/OAuth2Client.html#method_checkAccessToken", "name": "eureka2\\OAuth\\Client\\OAuth2Client::checkAccessToken", "doc": "&quot;Check if the access token was retrieved and if it is valid.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuthClientFactory.html", "name": "eureka2\\OAuth\\Client\\OAuthClientFactory", "doc": "&quot;This class provides a factory method for creating an OAuth client instance\nbased on the provider name, protocol, and version of this protocol.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientFactory", "fromLink": "eureka2/OAuth/Client/OAuthClientFactory.html", "link": "eureka2/OAuth/Client/OAuthClientFactory.html#method_create", "name": "eureka2\\OAuth\\Client\\OAuthClientFactory::create", "doc": "&quot;Creates a OAuth instance according to the given parameters.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface", "doc": "&quot;interface OAuthClientInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_initialize", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::initialize", "doc": "&quot;Initialize the class variables and internal state. It must\nbe called before calling other class functions.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_authenticate", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::authenticate", "doc": "&quot;Process the OAuth protocol interaction with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_callAPI", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::callAPI", "doc": "&quot;Send a HTTP request to the Web services API using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getResourceOwner", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getResourceOwner", "doc": "&quot;Returns the information about the resource owner using a\npreviously obtained access token via OAuth.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_fetchResourceOwner", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::fetchResourceOwner", "doc": "&quot;Returns the information about the resource owner.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_finalize", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::finalize", "doc": "&quot;Cleanup any resources that may have been used during the\nOAuth protocol processing or execution of API calls.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_checkAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::checkAccessToken", "doc": "&quot;Check if the access token was retrieved and if it is valid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_canRevokeToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::canRevokeToken", "doc": "&quot;Determines whether the revokeToken function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_revokeToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::revokeToken", "doc": "&quot;Revoke a previously obtained token so it becomes invalid.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_canLogOut", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::canLogOut", "doc": "&quot;Determines whether the logOut function can be called.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_logOut", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::logOut", "doc": "&quot;Calls the end-session endpoint to notify the provider\nthat the end-user has logged out of the relying party site.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_shouldExit", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::shouldExit", "doc": "&quot;Determine if the current script should be exited.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getAccessToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getAccessToken", "doc": "&quot;Returns the obtained access token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getRefreshToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getRefreshToken", "doc": "&quot;Returns the obtained refresh token upon\nsuccessful OAuth authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getIdToken", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getIdToken", "doc": "&quot;Returns the obtained ID token upon\nsuccessful OpenID authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientInterface", "fromLink": "eureka2/OAuth/Client/OAuthClientInterface.html", "link": "eureka2/OAuth/Client/OAuthClientInterface.html#method_getProvider", "name": "eureka2\\OAuth\\Client\\OAuthClientInterface::getProvider", "doc": "&quot;Returns the current instance\nof the OAuthProvider class.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "doc": "&quot;This class holds the options of execution of the OAuth client.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getReauthenticationParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getReauthenticationParameter", "doc": "&quot;Returns the parameters to add to the OAuth provider\nauthorization endpoint URL in case of new authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getOfflineAccessParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getOfflineAccessParameter", "doc": "&quot;Returns the parameter to add to the OAuth provider\nauthorization endpoint URL when offline access is requested.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getAppendStateToRedirectUri", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getAppendStateToRedirectUri", "doc": "&quot;Returns The name of the OAuth session state variable,\nif different from the standard name,\nto work around the implementation bugs of some OAuth providers.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_isParametersInUrl", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::isParametersInUrl", "doc": "&quot;Checks if the API call parameters should be moved to the\ncalling URL.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_isAuthorizationInHeader", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::isAuthorizationInHeader", "doc": "&quot;Checks if the OAuth parameters should be passed via HTTP\nAuthorization request header.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getTokenRequestMethod", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getTokenRequestMethod", "doc": "&quot;Returns the HTTP method that should be used to request\ntokens from the server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getSignatureMethod", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getSignatureMethod", "doc": "&quot;Returns the method to generate the signature for API request\nparameters values.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getSignatureCertificateFile", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getSignatureCertificateFile", "doc": "&quot;Returns the full path of the file\ncontaining a PEM encoded certificate\/private key&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getScope", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getScope", "doc": "&quot;Returns the permissions that your application needs to call\nthe OAuth server APIs&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_isOfflineAccess", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::isOfflineAccess", "doc": "&quot;Checks if it will be necessary to call the API when\nthe user is not present and the server supports renewing expired\naccess tokens using refresh tokens.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_shouldReauthenticate", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::shouldReauthenticate", "doc": "&quot;Checks if it will be necessary to force the user to\nauthenticate again even after the user has already authorized the\napplication before.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getDefaultAccessTokenType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getDefaultAccessTokenType", "doc": "&quot;Returns the type of access token to be assumed when the OAuth server\ndoes not specify an access token type.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getAccessTokenContentType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getAccessTokenContentType", "doc": "&quot;Returns the content type to be assumed when retrieving the response to\na request to retrieve the access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getAccessTokenLanguage", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getAccessTokenLanguage", "doc": "&quot;Returns the language to be assumed when retrieving the response to\na request to retrieve the access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getAccessTokenParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getAccessTokenParameter", "doc": "&quot;Returns the name of the access token parameter to be passed\nin API call requests.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_shouldStoreAccessTokenResponse", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::shouldStoreAccessTokenResponse", "doc": "&quot;Checks if the original response for the access\ntoken request should be stored in the\naccessTokenResponse variable.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getAccessTokenAuthentication", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getAccessTokenAuthentication", "doc": "&quot;Returns the option to determine if the requests to obtain a new access\ntoken should use authentication to pass the application client ID\nand secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getRefreshTokenAuthentication", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getRefreshTokenAuthentication", "doc": "&quot;Returns the option to determine if the requests to refresh an expired\naccess token should use authentication to pass the application\nclient ID and secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_getGrantType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::getGrantType", "doc": "&quot;Returns the type of grant to obtain the OAuth 2 access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_shouldGetTokenWithApiKey", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::shouldGetTokenWithApiKey", "doc": "&quot;Checks if the access token should be retrieved\nusing the API key value instead of the client secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setReauthenticationParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setReauthenticationParameter", "doc": "&quot;Sets the parameters to add to the OAuth provider authorization endpoint URL\nin case of new authentication.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setOfflineAccessParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setOfflineAccessParameter", "doc": "&quot;Sets the parameter to add to the OAuth provider\nauthorization endpoint URL when offline access is requested.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAppendStateToRedirectUri", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAppendStateToRedirectUri", "doc": "&quot;Sets The name of the OAuth session state variable,\nif different from the standard name,\nto work around the implementation bugs of some OAuth providers.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setParametersInUrl", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setParametersInUrl", "doc": "&quot;Determines if the API call parameters should be moved to the calling URL.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAuthorizationHeader", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAuthorizationHeader", "doc": "&quot;Determines if the OAuth parameters should be passed via HTTP\nAuthorization request header.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setTokenRequestMethod", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setTokenRequestMethod", "doc": "&quot;Sets the HTTP method that should be used to request\ntokens from the server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setSignatureMethod", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setSignatureMethod", "doc": "&quot;Sets the method to generate the signature for API request\nparameters values. OAuth 1.0 or 1.0a only.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setSignatureCertificateFile", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setSignatureCertificateFile", "doc": "&quot;Sets the full path of the file containing a PEM encoded certificate\/private key&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setScope", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setScope", "doc": "&quot;Sets the scope, that is to say, the set of permissions\nthat the application needs to call the OAuth provider APIs&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setOfflineAccess", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setOfflineAccess", "doc": "&quot;Determines whether it will be necessary to call the API when\nthe user is not present and the provider supports renewing expired\naccess tokens using refresh tokens.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setReauthenticate", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setReauthenticate", "doc": "&quot;Determines whether it will be necessary to force the user to\nauthenticate again even after the user has already authorized the\napplication before.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setDefaultAccessTokenType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setDefaultAccessTokenType", "doc": "&quot;Sets the type of access token to be assumed when the OAuth server\ndoes not specify an access token type.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAccessTokenContentType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAccessTokenContentType", "doc": "&quot;Sets the content type to be assumed when retrieving the response to\na request to retrieve the access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAccessTokenLanguage", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAccessTokenLanguage", "doc": "&quot;Sets the language to be assumed when retrieving the response to\na request to retrieve the access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAccessTokenParameter", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAccessTokenParameter", "doc": "&quot;Sets the name of the access token parameter to be passed in API call\nrequests.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setStoreAccessTokenResponse", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setStoreAccessTokenResponse", "doc": "&quot;Determines if the original response for the access\ntoken request should be stored in the\naccessTokenResponse variable.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setAccessTokenAuthentication", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setAccessTokenAuthentication", "doc": "&quot;Determines if the requests to obtain a new access\ntoken should use authentication to pass the application client ID\nand secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setRefreshTokenAuthentication", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setRefreshTokenAuthentication", "doc": "&quot;Determines if the requests to refresh an expired\naccess token should use authentication to pass the application\nclient ID and secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setGrantType", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setGrantType", "doc": "&quot;Sets the type of grant to obtain the OAuth 2 access token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_setGetTokenWithApiKey", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::setGetTokenWithApiKey", "doc": "&quot;Determines if the access token should be retrieved\nusing the API key value instead of the client secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OAuthClientStrategy", "fromLink": "eureka2/OAuth/Client/OAuthClientStrategy.html", "link": "eureka2/OAuth/Client/OAuthClientStrategy.html#method_bind", "name": "eureka2\\OAuth\\Client\\OAuthClientStrategy::bind", "doc": "&quot;Binds the configuration options to the properties\nof this instance of the OAuth client strategy.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OpenIDClient.html", "name": "eureka2\\OAuth\\Client\\OpenIDClient", "doc": "&quot;This class completes the OAuth2Client class for the OpenID protocol.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OpenIDClient", "fromLink": "eureka2/OAuth/Client/OpenIDClient.html", "link": "eureka2/OAuth/Client/OpenIDClient.html#method_discover", "name": "eureka2\\OAuth\\Client\\OpenIDClient::discover", "doc": "&quot;Sends a OAuth request to the discovery endpoint of the OpenID provider\nin order to obtain the configuration information, which is the list of\nall endpoints and the list of supported OAuth elements.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OpenIDClient", "fromLink": "eureka2/OAuth/Client/OpenIDClient.html", "link": "eureka2/OAuth/Client/OpenIDClient.html#method_introspectToken", "name": "eureka2\\OAuth\\Client\\OpenIDClient::introspectToken", "doc": "&quot;Determines the active state of a token\nand the meta-information about this token.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Client", "fromLink": "eureka2/OAuth/Client.html", "link": "eureka2/OAuth/Client/OpenIDClientInterface.html", "name": "eureka2\\OAuth\\Client\\OpenIDClientInterface", "doc": "&quot;This interface completes the OAuthClient interface for the OpenID protocol.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Client\\OpenIDClientInterface", "fromLink": "eureka2/OAuth/Client/OpenIDClientInterface.html", "link": "eureka2/OAuth/Client/OpenIDClientInterface.html#method_introspectToken", "name": "eureka2\\OAuth\\Client\\OpenIDClientInterface::introspectToken", "doc": "&quot;Determines the active state of a token\nand the meta-information about this token.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Exception", "fromLink": "eureka2/OAuth/Exception.html", "link": "eureka2/OAuth/Exception/OAuthClientAccessTokenException.html", "name": "eureka2\\OAuth\\Exception\\OAuthClientAccessTokenException", "doc": "&quot;class OAuthClientAccessTokenException&quot;"},
                    
            {"type": "Class", "fromName": "eureka2\\OAuth\\Exception", "fromLink": "eureka2/OAuth/Exception.html", "link": "eureka2/OAuth/Exception/OAuthClientAuthorizationException.html", "name": "eureka2\\OAuth\\Exception\\OAuthClientAuthorizationException", "doc": "&quot;class OAuthClientAuthorizationException&quot;"},
                    
            {"type": "Class", "fromName": "eureka2\\OAuth\\Exception", "fromLink": "eureka2/OAuth/Exception.html", "link": "eureka2/OAuth/Exception/OAuthClientException.html", "name": "eureka2\\OAuth\\Exception\\OAuthClientException", "doc": "&quot;class OAuthClientException&quot;"},
                    
            {"type": "Class", "fromName": "eureka2\\OAuth\\Exception", "fromLink": "eureka2/OAuth/Exception.html", "link": "eureka2/OAuth/Exception/OAuthClientPHPException.html", "name": "eureka2\\OAuth\\Exception\\OAuthClientPHPException", "doc": "&quot;class OAuthClientPHPException&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Exception\\OAuthClientPHPException", "fromLink": "eureka2/OAuth/Exception/OAuthClientPHPException.html", "link": "eureka2/OAuth/Exception/OAuthClientPHPException.html#method___construct", "name": "eureka2\\OAuth\\Exception\\OAuthClientPHPException::__construct", "doc": "&quot;Constructor of class OAuthClientPHPException&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Exception\\OAuthClientPHPException", "fromLink": "eureka2/OAuth/Exception/OAuthClientPHPException.html", "link": "eureka2/OAuth/Exception/OAuthClientPHPException.html#method___toString", "name": "eureka2\\OAuth\\Exception\\OAuthClientPHPException::__toString", "doc": "&quot;function __toString&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Exception", "fromLink": "eureka2/OAuth/Exception.html", "link": "eureka2/OAuth/Exception/OAuthClientSignatureException.html", "name": "eureka2\\OAuth\\Exception\\OAuthClientSignatureException", "doc": "&quot;class OAuthClientSignatureException&quot;"},
                    
            {"type": "Class", "fromName": "eureka2\\OAuth\\Provider", "fromLink": "eureka2/OAuth/Provider.html", "link": "eureka2/OAuth/Provider/OAuthBuiltinProviders.html", "name": "eureka2\\OAuth\\Provider\\OAuthBuiltinProviders", "doc": "&quot;This class contains the configuration for the following OAuth providers:&quot;"},
                    
            {"type": "Class", "fromName": "eureka2\\OAuth\\Provider", "fromLink": "eureka2/OAuth/Provider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html", "name": "eureka2\\OAuth\\Provider\\OAuthProvider", "doc": "&quot;This class, which represents an OAuth provider,\nstores the configuration parameters related to this provider.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method___construct", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::__construct", "doc": "&quot;Constructs a OAuthProvider instance with the registered data of the client\nwith the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getName", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getName", "doc": "&quot;Returns the name of the provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getProtocol", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getProtocol", "doc": "&quot;Returns the OAuth-based protocol, either &#039;oauth&#039; or &#039;openid&#039;&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getVersion", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getVersion", "doc": "&quot;Returns the version of the protocol supported by the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getClientId", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getClientId", "doc": "&quot;Returns the identifier of your application registered with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getClientSecret", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getClientSecret", "doc": "&quot;Returns the secret value assigned to your application.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getRedirectUri", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getRedirectUri", "doc": "&quot;Returns the URL of the current script page that is calling this class&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getDiscoveryEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getDiscoveryEndpoint", "doc": "&quot;Returns the discovery endpoint.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getAuthorizationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getAuthorizationEndpoint", "doc": "&quot;Returns the authorization endpoint.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getTokenEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getTokenEndpoint", "doc": "&quot;Returns the token endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getRegistrationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getRegistrationEndpoint", "doc": "&quot;Returns the client dynamic registration endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getIntrospectionEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getIntrospectionEndpoint", "doc": "&quot;Returns the introspection endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getRevocationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getRevocationEndpoint", "doc": "&quot;Returns the revocation endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getRequestTokenEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getRequestTokenEndpoint", "doc": "&quot;Returns the request token endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getUserinfoEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getUserinfoEndpoint", "doc": "&quot;Returns the UserInfo endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getEndSessionEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getEndSessionEndpoint", "doc": "&quot;Returns the end session endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getPinDialogUrl", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getPinDialogUrl", "doc": "&quot;Returns the pin dialog url&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getPin", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getPin", "doc": "&quot;Returns the value of the pin code&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getJwksUri", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getJwksUri", "doc": "&quot;Returns the Jwks URI&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getScopesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getScopesSupported", "doc": "&quot;Returns the scope values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getResponseTypesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getResponseTypesSupported", "doc": "&quot;Returns the response_type values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getResponseModesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getResponseModesSupported", "doc": "&quot;Returns the response_mode values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getTokenEndpointAuthMethodsSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getTokenEndpointAuthMethodsSupported", "doc": "&quot;Returns the authentication methods supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getSubjectTypesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getSubjectTypesSupported", "doc": "&quot;Returns the subject identifier types supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getIdTokenSigningAlgValuesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getIdTokenSigningAlgValuesSupported", "doc": "&quot;Returns the list of JWS signing algorithms supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getClaimsSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getClaimsSupported", "doc": "&quot;Returns the claims supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getUserIdField", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getUserIdField", "doc": "&quot;Returns the field of the user info corresponding to the user identifier.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getMapping", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getMapping", "doc": "&quot;Returns the fields mapping between the OAuth client and the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getApiKey", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getApiKey", "doc": "&quot;Returns the identifier of the API key provided by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getOauthUsername", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getOauthUsername", "doc": "&quot;Returns the OAuth user name to use with password authorization&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getOauthPassword", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getOauthPassword", "doc": "&quot;Returns the OAuth password to use with password authorization&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_getRealm", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::getRealm", "doc": "&quot;Returns the realm of authorization for OpenID Connect&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setProtocol", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setProtocol", "doc": "&quot;Sets the OAuth-based protocol, either &#039;oauth&#039; or &#039;openid&#039;&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setVersion", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setVersion", "doc": "&quot;Sets the version of the protocol supported by the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setClientId", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setClientId", "doc": "&quot;Sets the identifier of your application registered with the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setClientSecret", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setClientSecret", "doc": "&quot;Sets the secret value assigned to your application.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setRedirectUri", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setRedirectUri", "doc": "&quot;Sets the URL of the current script page that is calling this class&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setDiscoveryEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setDiscoveryEndpoint", "doc": "&quot;Sets the discovery endpoint.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setAuthorizationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setAuthorizationEndpoint", "doc": "&quot;Sets the authorization endpoint.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setTokenEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setTokenEndpoint", "doc": "&quot;Sets the token endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setRegistrationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setRegistrationEndpoint", "doc": "&quot;Sets the client dynamic registration endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setIntrospectionEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setIntrospectionEndpoint", "doc": "&quot;Sets the introspection endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setRevocationEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setRevocationEndpoint", "doc": "&quot;Sets the revocation endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setRequestTokenEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setRequestTokenEndpoint", "doc": "&quot;Sets the request token endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setUserinfoEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setUserinfoEndpoint", "doc": "&quot;Sets the UserInfo endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setEndSessionEndpoint", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setEndSessionEndpoint", "doc": "&quot;Sets the end session endpoint&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setPinDialogUrl", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setPinDialogUrl", "doc": "&quot;Sets the pin dialog url&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setPin", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setPin", "doc": "&quot;Sets the value of the pin code&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setJwksUri", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setJwksUri", "doc": "&quot;Sets the Jwks URI&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setScopesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setScopesSupported", "doc": "&quot;Sets the scope values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setResponseTypesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setResponseTypesSupported", "doc": "&quot;Sets the response_type values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setResponseModesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setResponseModesSupported", "doc": "&quot;Sets the response_mode values supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setTokenEndpointAuthMethodsSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setTokenEndpointAuthMethodsSupported", "doc": "&quot;Sets the authentication methods supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setSubjectTypesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setSubjectTypesSupported", "doc": "&quot;Sets the subject identifier types supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setIdTokenSigningAlgValuesSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setIdTokenSigningAlgValuesSupported", "doc": "&quot;Sets the list of JWS signing algorithms supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setClaimsSupported", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setClaimsSupported", "doc": "&quot;Sets the claims supported by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setUserIdField", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setUserIdField", "doc": "&quot;Sets the field of the user info corresponding to the user identifier.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setMapping", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setMapping", "doc": "&quot;Sets the fields mapping between the OAuth client and the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setApiKey", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setApiKey", "doc": "&quot;Sets the identifier of the API key provided by the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setOauthUsername", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setOauthUsername", "doc": "&quot;Sets the OAuth user name to use with password authorization&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setOauthPassword", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setOauthPassword", "doc": "&quot;Sets the OAuth password to use with password authorization&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_setRealm", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::setRealm", "doc": "&quot;Sets the realm of authorization for OpenID Connect&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_bind", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::bind", "doc": "&quot;Binds the configuration parameters to the properties\nof this instance of the OAuth provider.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Provider\\OAuthProvider", "fromLink": "eureka2/OAuth/Provider/OAuthProvider.html", "link": "eureka2/OAuth/Provider/OAuthProvider.html#method_makeDefaultRedirectUri", "name": "eureka2\\OAuth\\Provider\\OAuthProvider::makeDefaultRedirectUri", "doc": "&quot;Constructs a default redirect URI from the superglobals.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Request", "fromLink": "eureka2/OAuth/Request.html", "link": "eureka2/OAuth/Request/OAuthRequest.html", "name": "eureka2\\OAuth\\Request\\OAuthRequest", "doc": "&quot;This class represents an outgoing OAuth request to be sent to an OAuth provider.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method___construct", "name": "eureka2\\OAuth\\Request\\OAuthRequest::__construct", "doc": "&quot;Constructs a OAuth request object&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_getUrl", "name": "eureka2\\OAuth\\Request\\OAuthRequest::getUrl", "doc": "&quot;Returns the url of the endpoint of the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_getMethod", "name": "eureka2\\OAuth\\Request\\OAuthRequest::getMethod", "doc": "&quot;Returns the HTTP method for the request&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_getHeaders", "name": "eureka2\\OAuth\\Request\\OAuthRequest::getHeaders", "doc": "&quot;Returns the request-header fields&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_getBody", "name": "eureka2\\OAuth\\Request\\OAuthRequest::getBody", "doc": "&quot;Returns the body content of the request&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_setUrl", "name": "eureka2\\OAuth\\Request\\OAuthRequest::setUrl", "doc": "&quot;Sets the url of the endpoint of the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_setMethod", "name": "eureka2\\OAuth\\Request\\OAuthRequest::setMethod", "doc": "&quot;Sets the HTTP method for the request&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_setHeaders", "name": "eureka2\\OAuth\\Request\\OAuthRequest::setHeaders", "doc": "&quot;Sets the request-header fields&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Request\\OAuthRequest", "fromLink": "eureka2/OAuth/Request/OAuthRequest.html", "link": "eureka2/OAuth/Request/OAuthRequest.html#method_setBody", "name": "eureka2\\OAuth\\Request\\OAuthRequest::setBody", "doc": "&quot;Sets the body content of the request&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Response", "fromLink": "eureka2/OAuth/Response.html", "link": "eureka2/OAuth/Response/OAuthResponse.html", "name": "eureka2\\OAuth\\Response\\OAuthResponse", "doc": "&quot;Base class for all resource, represents the response of the callAPI method.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method___construct", "name": "eureka2\\OAuth\\Response\\OAuthResponse::__construct", "doc": "&quot;Constructs a OAuthResponse object&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method___get", "name": "eureka2\\OAuth\\Response\\OAuthResponse::__get", "doc": "&quot;Allows direct read-only access to a property&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method___isset", "name": "eureka2\\OAuth\\Response\\OAuthResponse::__isset", "doc": "&quot;Allows to test (isset) directly the existence of a property&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method___call", "name": "eureka2\\OAuth\\Response\\OAuthResponse::__call", "doc": "&quot;Defines a dynamic getter for the properties.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method_rewind", "name": "eureka2\\OAuth\\Response\\OAuthResponse::rewind", "doc": "&quot;Rewinds back to the first property of the resource.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method_current", "name": "eureka2\\OAuth\\Response\\OAuthResponse::current", "doc": "&quot;Returns the current property&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method_key", "name": "eureka2\\OAuth\\Response\\OAuthResponse::key", "doc": "&quot;Returns the name of the current property&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method_next", "name": "eureka2\\OAuth\\Response\\OAuthResponse::next", "doc": "&quot;Moves forward to next property&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\OAuthResponse", "fromLink": "eureka2/OAuth/Response/OAuthResponse.html", "link": "eureka2/OAuth/Response/OAuthResponse.html#method_valid", "name": "eureka2\\OAuth\\Response\\OAuthResponse::valid", "doc": "&quot;Checks if current position is valid&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Response", "fromLink": "eureka2/OAuth/Response.html", "link": "eureka2/OAuth/Response/ResourceOwner.html", "name": "eureka2\\OAuth\\Response\\ResourceOwner", "doc": "&quot;This class represents a resource owner&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\ResourceOwner", "fromLink": "eureka2/OAuth/Response/ResourceOwner.html", "link": "eureka2/OAuth/Response/ResourceOwner.html#method___construct", "name": "eureka2\\OAuth\\Response\\ResourceOwner::__construct", "doc": "&quot;Constructs a ResourceOwner object&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Response\\ResourceOwner", "fromLink": "eureka2/OAuth/Response/ResourceOwner.html", "link": "eureka2/OAuth/Response/ResourceOwner.html#method_getId", "name": "eureka2\\OAuth\\Response\\ResourceOwner::getId", "doc": "&quot;Returns the ID of the resource owner&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "doc": "&quot;Base class for all token storage classes&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method___construct", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::__construct", "doc": "&quot;Constructs a token storage object derived from this class&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getSessionId", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getSessionId", "doc": "&quot;Returns the id of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getSessionCookieName", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getSessionCookieName", "doc": "&quot;Returns the name of a cookie that will be used to store the session id\nregardless of the token storage system&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getSessionCookie", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getSessionCookie", "doc": "&quot;Returns the session id stored in a cookie\nregardless of the token storage system&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getSessionPath", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getSessionPath", "doc": "&quot;Returns the path on the server\nin which the cookie will be available on&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_setSessionId", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::setSessionId", "doc": "&quot;Sets the id of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_setSessionPath", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::setSessionPath", "doc": "&quot;Sets the path on the server in which the cookie will be available on&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_deleteSessionCookie", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::deleteSessionCookie", "doc": "&quot;Deletes the session cookie that holds the session id&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_initializeOAuthSession", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::initializeOAuthSession", "doc": "&quot;Creates an OAuthSession object and initializes it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_fetchOAuthSession", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::fetchOAuthSession", "doc": "&quot;Retrieves the OAuth session or create it if it does not exist&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_storeAccessToken", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::storeAccessToken", "doc": "&quot;Store the values of the access token when it is succefully\nretrieved from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_storeUserid", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::storeUserid", "doc": "&quot;Stores the user ID returned by the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getStoredAccessToken", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getStoredAccessToken", "doc": "&quot;Retrieve the OAuth access token if it was already previously stored by the\nstoreAccessToken method.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getStoredState", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getStoredState", "doc": "&quot;Returns the stored state&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getStoredNonce", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getStoredNonce", "doc": "&quot;Returns the stored nonce&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\AbstractTokenStorage", "fromLink": "eureka2/OAuth/Storage/AbstractTokenStorage.html", "link": "eureka2/OAuth/Storage/AbstractTokenStorage.html#method_getStoredUserId", "name": "eureka2\\OAuth\\Storage\\AbstractTokenStorage::getStoredUserId", "doc": "&quot;Returns the stored user ID&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/ApcuTokenStorage.html", "name": "eureka2\\OAuth\\Storage\\ApcuTokenStorage", "doc": "&quot;This class uses the PHP APC User Cache (APCu)\nto store the OAuth session variables.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\ApcuTokenStorage", "fromLink": "eureka2/OAuth/Storage/ApcuTokenStorage.html", "link": "eureka2/OAuth/Storage/ApcuTokenStorage.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\ApcuTokenStorage::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\ApcuTokenStorage", "fromLink": "eureka2/OAuth/Storage/ApcuTokenStorage.html", "link": "eureka2/OAuth/Storage/ApcuTokenStorage.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\ApcuTokenStorage::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\ApcuTokenStorage", "fromLink": "eureka2/OAuth/Storage/ApcuTokenStorage.html", "link": "eureka2/OAuth/Storage/ApcuTokenStorage.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\ApcuTokenStorage::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\ApcuTokenStorage", "fromLink": "eureka2/OAuth/Storage/ApcuTokenStorage.html", "link": "eureka2/OAuth/Storage/ApcuTokenStorage.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\ApcuTokenStorage::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "doc": "&quot;This class uses encrypted cookies\nto store the OAuth session variables.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_getCookieName", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::getCookieName", "doc": "&quot;Returns the name of the cookie used to store the OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_getCookie", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::getCookie", "doc": "&quot;Returns the encrypted OAuth session stored in the cookie&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_getCookieValue", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::getCookieValue", "doc": "&quot;Returns the decrypted value of the cookie storing the OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_setCookieValue", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::setCookieValue", "doc": "&quot;Sets the decrypted value of the cookie storing the OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_deleteCookie", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::deleteCookie", "doc": "&quot;Deletes the cookie that stores the OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_encrypt", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::encrypt", "doc": "&quot;Encrypts a string using the cookie encryption key provided\nat initialization of this class.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_decrypt", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::decrypt", "doc": "&quot;Decrypts a string using the cookie encryption key provided\nat initialization of this class.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_unserialize", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::unserialize", "doc": "&quot;Unserializes, after decryption, the OAuth session stored in cookie\nthen creates a OAuthSession object and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\CookieTokenStorage", "fromLink": "eureka2/OAuth/Storage/CookieTokenStorage.html", "link": "eureka2/OAuth/Storage/CookieTokenStorage.html#method_serialize", "name": "eureka2\\OAuth\\Storage\\CookieTokenStorage::serialize", "doc": "&quot;Serializes, after encryption, the OAuthSession object given in argument\nthen stores it in a cookie.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/OAuthSession.html", "name": "eureka2\\OAuth\\Storage\\OAuthSession", "doc": "&quot;This class holds all the variables stored during a session&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method___construct", "name": "eureka2\\OAuth\\Storage\\OAuthSession::__construct", "doc": "&quot;Constructs a OAuthSession object from an array of session values&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getId", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getId", "doc": "&quot;Returns the serial number of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getSessionId", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getSessionId", "doc": "&quot;Returns the id of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getState", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getState", "doc": "&quot;Returns the state parameter of authorization flow&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getNonce", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getNonce", "doc": "&quot;Returns the nonce used to mitigate replay attacks&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getAccessToken", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getAccessToken", "doc": "&quot;Returns the access token received from the provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getProvider", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getProvider", "doc": "&quot;Returns the name of the provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getCreation", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getCreation", "doc": "&quot;Returns the creation date of the session in &#039;%Y-%m-%d %H:%M:%S&#039; format&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_getUserId", "name": "eureka2\\OAuth\\Storage\\OAuthSession::getUserId", "doc": "&quot;Returns the user ID of the resource owner&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setId", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setId", "doc": "&quot;Sets the serial number of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setSession", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setSession", "doc": "&quot;Sets the the id of the session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setState", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setState", "doc": "&quot;Sets the state parameter of authorization flow&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setNonce", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setNonce", "doc": "&quot;Sets the nonce used to mitigate replay attacks&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setAccessToken", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setAccessToken", "doc": "&quot;Sets the access token received from the provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setProvider", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setProvider", "doc": "&quot;Sets the the name of the provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setCreation", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setCreation", "doc": "&quot;Sets the creation date of the session in &#039;%Y-%m-%d %H:%M:%S&#039; format&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_setUserId", "name": "eureka2\\OAuth\\Storage\\OAuthSession::setUserId", "doc": "&quot;Sets the user ID of the resource owner&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\OAuthSession", "fromLink": "eureka2/OAuth/Storage/OAuthSession.html", "link": "eureka2/OAuth/Storage/OAuthSession.html#method_toArray", "name": "eureka2\\OAuth\\Storage\\OAuthSession::toArray", "doc": "&quot;Converts the OAuthSession object to array&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "doc": "&quot;This class uses a PDO database (MySQL, PostGreSQL or SQLite)\nto store the OAuth session variables.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_setOAuthSession", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::setOAuthSession", "doc": "&quot;Creates an OAuthSession object from an array of session variables.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_tableExists", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::tableExists", "doc": "&quot;Checks if the OAuth session table exists&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_createTable", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::createTable", "doc": "&quot;Creates the OAuth session table&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_connect", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::connect", "doc": "&quot;Connects to the database&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\PdoTokenStorage", "fromLink": "eureka2/OAuth/Storage/PdoTokenStorage.html", "link": "eureka2/OAuth/Storage/PdoTokenStorage.html#method_query", "name": "eureka2\\OAuth\\Storage\\PdoTokenStorage::query", "doc": "&quot;Executes a query on the session table&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "doc": "&quot;This class uses the superglobal $_SESSION\nto store the OAuth session variables.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "fromLink": "eureka2/OAuth/Storage/SessionTokenStorage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "fromLink": "eureka2/OAuth/Storage/SessionTokenStorage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "fromLink": "eureka2/OAuth/Storage/SessionTokenStorage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "fromLink": "eureka2/OAuth/Storage/SessionTokenStorage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\SessionTokenStorage", "fromLink": "eureka2/OAuth/Storage/SessionTokenStorage.html", "link": "eureka2/OAuth/Storage/SessionTokenStorage.html#method_startSession", "name": "eureka2\\OAuth\\Storage\\SessionTokenStorage::startSession", "doc": "&quot;Starts a PHP session, if not already started&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/TokenStorageFactory.html", "name": "eureka2\\OAuth\\Storage\\TokenStorageFactory", "doc": "&quot;class TokenStorageFactory&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageFactory", "fromLink": "eureka2/OAuth/Storage/TokenStorageFactory.html", "link": "eureka2/OAuth/Storage/TokenStorageFactory.html#method_create", "name": "eureka2\\OAuth\\Storage\\TokenStorageFactory::create", "doc": "&quot;Create a Token Storage instance according to the given storage options.&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "doc": "&quot;interface TokenStorageInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_storeAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::storeAccessToken", "doc": "&quot;Store the values of the access token when it is succefully\nretrieved from the OAuth server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredAccessToken", "doc": "&quot;Retrieve the OAuth access token if it was already previously stored by the\nstoreAccessToken method.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_resetAccessToken", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::resetAccessToken", "doc": "&quot;Reset the access token to a state back when the user has\nnot yet authorized the access to the OAuth server API.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredState", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredState", "doc": "&quot;Returns the stored state&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredNonce", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredNonce", "doc": "&quot;Returns the stored nonce&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_storeUserid", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::storeUserid", "doc": "&quot;Stores the user ID returned by the OAuth provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageInterface.html#method_getStoredUserId", "name": "eureka2\\OAuth\\Storage\\TokenStorageInterface::getStoredUserId", "doc": "&quot;Returns the stored user ID&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Storage", "fromLink": "eureka2/OAuth/Storage.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "doc": "&quot;interface TokenStorageManagementInterface&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_createOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::createOAuthSession", "doc": "&quot;Creates and saves a new OAuth session&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_getOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::getOAuthSession", "doc": "&quot;Retrieves an OAuth session for a given provider&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface", "fromLink": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html", "link": "eureka2/OAuth/Storage/TokenStorageManagementInterface.html#method_saveOAuthSession", "name": "eureka2\\OAuth\\Storage\\TokenStorageManagementInterface::saveOAuthSession", "doc": "&quot;Saves a session for later use&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Token", "fromLink": "eureka2/OAuth/Token.html", "link": "eureka2/OAuth/Token/AccessToken.html", "name": "eureka2\\OAuth\\Token\\AccessToken", "doc": "&quot;This class represents the access token response\nreturned by the authorization server.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method___construct", "name": "eureka2\\OAuth\\Token\\AccessToken::__construct", "doc": "&quot;Constructs a AccessToken object from an array&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getValue", "name": "eureka2\\OAuth\\Token\\AccessToken::getValue", "doc": "&quot;Returns the access token string as issued by the authorization server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getSecret", "name": "eureka2\\OAuth\\Token\\AccessToken::getSecret", "doc": "&quot;Returns the access token secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_isAuthorized", "name": "eureka2\\OAuth\\Token\\AccessToken::isAuthorized", "doc": "&quot;Is the OAuth token is authorized?\nFor OAuth 2.0, this value is always true.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getExpiry", "name": "eureka2\\OAuth\\Token\\AccessToken::getExpiry", "doc": "&quot;Returns the expiration date time of the access token (format: %Y-%m-%d %H:%M:%S)\ncalculated from the lifetime in seconds of the token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getType", "name": "eureka2\\OAuth\\Token\\AccessToken::getType", "doc": "&quot;Returns the type of token which is, typically just the string \u201cbearer\u201d.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getRefresh", "name": "eureka2\\OAuth\\Token\\AccessToken::getRefresh", "doc": "&quot;Returns the refresh token which applications can use to obtain another access token\nwhen the access token will expire.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getScope", "name": "eureka2\\OAuth\\Token\\AccessToken::getScope", "doc": "&quot;Returns the granted scope when it is different from the requested scope,\nsuch as if the user modified the scope.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getIdToken", "name": "eureka2\\OAuth\\Token\\AccessToken::getIdToken", "doc": "&quot;Returns the OpenID token that the authorization server will return\nwhich encodes the user\u2019s authentication information.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_getResponse", "name": "eureka2\\OAuth\\Token\\AccessToken::getResponse", "doc": "&quot;Returns the access token response as returned by the authorization server&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setValue", "name": "eureka2\\OAuth\\Token\\AccessToken::setValue", "doc": "&quot;Sets the access token string as issued by the authorization server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setSecret", "name": "eureka2\\OAuth\\Token\\AccessToken::setSecret", "doc": "&quot;Sets the access token secret.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setAuthorized", "name": "eureka2\\OAuth\\Token\\AccessToken::setAuthorized", "doc": "&quot;Determines if the OAuth token is authorized or not.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setExpiry", "name": "eureka2\\OAuth\\Token\\AccessToken::setExpiry", "doc": "&quot;Sets the expiration date time of the access token (format: %Y-%m-%d %H:%M:%S)\ncalculated from the lifetime in seconds of the token.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setType", "name": "eureka2\\OAuth\\Token\\AccessToken::setType", "doc": "&quot;Sets the type of token which is, typically just the string \u201cbearer\u201d.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setRefresh", "name": "eureka2\\OAuth\\Token\\AccessToken::setRefresh", "doc": "&quot;Sets the refresh token which applications can use to obtain another access token\nwhen the access token will expire.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setScope", "name": "eureka2\\OAuth\\Token\\AccessToken::setScope", "doc": "&quot;Sets the granted scope when it is different from the requested scope,\nsuch as if the user modified the scope.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setIdToken", "name": "eureka2\\OAuth\\Token\\AccessToken::setIdToken", "doc": "&quot;Sets the OpenID token that the authorization server will return\nwhich encodes the user\u2019s authentication information.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_setResponse", "name": "eureka2\\OAuth\\Token\\AccessToken::setResponse", "doc": "&quot;Sets the access token response as returned by the authorization server&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method___toString", "name": "eureka2\\OAuth\\Token\\AccessToken::__toString", "doc": "&quot;Returns the access token string as issued by the authorization server.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\AccessToken", "fromLink": "eureka2/OAuth/Token/AccessToken.html", "link": "eureka2/OAuth/Token/AccessToken.html#method_toArray", "name": "eureka2\\OAuth\\Token\\AccessToken::toArray", "doc": "&quot;Converts the access token to array&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Token", "fromLink": "eureka2/OAuth/Token.html", "link": "eureka2/OAuth/Token/IdToken.html", "name": "eureka2\\OAuth\\Token\\IdToken", "doc": "&quot;This class represents an ID Token.&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method___construct", "name": "eureka2\\OAuth\\Token\\IdToken::__construct", "doc": "&quot;Constructs an IdToken instance from an undecoded ID token string&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_get", "name": "eureka2\\OAuth\\Token\\IdToken::get", "doc": "&quot;Returns the undecoded ID Token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getIss", "name": "eureka2\\OAuth\\Token\\IdToken::getIss", "doc": "&quot;Returns the Issuer Identifier of the issuer of the response.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getSub", "name": "eureka2\\OAuth\\Token\\IdToken::getSub", "doc": "&quot;Returns the Subject Identifier.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAud", "name": "eureka2\\OAuth\\Token\\IdToken::getAud", "doc": "&quot;Returns the audience(s) that this ID Token is intended for.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getExp", "name": "eureka2\\OAuth\\Token\\IdToken::getExp", "doc": "&quot;Returns the expiration time on or after which the ID Token MUST NOT be accepted for processing.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getIat", "name": "eureka2\\OAuth\\Token\\IdToken::getIat", "doc": "&quot;Returns the time at which the JWT was issued.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAuthTime", "name": "eureka2\\OAuth\\Token\\IdToken::getAuthTime", "doc": "&quot;Returns the time when the End-User authentication occurred.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getNonce", "name": "eureka2\\OAuth\\Token\\IdToken::getNonce", "doc": "&quot;Returns the value used to associate a Client session with an ID Token,\nand to mitigate replay attacks.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAcr", "name": "eureka2\\OAuth\\Token\\IdToken::getAcr", "doc": "&quot;Returns the Authentication Context Class Reference.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAmr", "name": "eureka2\\OAuth\\Token\\IdToken::getAmr", "doc": "&quot;Returns the Authentication Methods References.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAzp", "name": "eureka2\\OAuth\\Token\\IdToken::getAzp", "doc": "&quot;Returns the Authorized party - the party to which the ID Token was issued.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getAtHash", "name": "eureka2\\OAuth\\Token\\IdToken::getAtHash", "doc": "&quot;Returns the hash of the OAuth2 access token when used with Implicit profile.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getCHash", "name": "eureka2\\OAuth\\Token\\IdToken::getCHash", "doc": "&quot;Returns the hash of the OAuth2 authorization code when used with the hybrid profile.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getClaim", "name": "eureka2\\OAuth\\Token\\IdToken::getClaim", "doc": "&quot;Returns the value of specified claim&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_getClaims", "name": "eureka2\\OAuth\\Token\\IdToken::getClaims", "doc": "&quot;Returns the array of claims&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method___toString", "name": "eureka2\\OAuth\\Token\\IdToken::__toString", "doc": "&quot;Returns the undecoded ID Token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\IdToken", "fromLink": "eureka2/OAuth/Token/IdToken.html", "link": "eureka2/OAuth/Token/IdToken.html#method_toArray", "name": "eureka2\\OAuth\\Token\\IdToken::toArray", "doc": "&quot;Returns an array containing the claims and the undecoded ID Token&quot;"},
            
            {"type": "Class", "fromName": "eureka2\\OAuth\\Token", "fromLink": "eureka2/OAuth/Token.html", "link": "eureka2/OAuth/Token/JWT.html", "name": "eureka2\\OAuth\\Token\\JWT", "doc": "&quot;This class provides a set of functions related to Json Web Token&quot;"},
                                                        {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_decode", "name": "eureka2\\OAuth\\Token\\JWT::decode", "doc": "&quot;Decodes a section of the JSON Web Token and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_safeBase64Decode", "name": "eureka2\\OAuth\\Token\\JWT::safeBase64Decode", "doc": "&quot;Decodes a string encoded in url-safe base64 and returns it.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_encodeASNLength", "name": "eureka2\\OAuth\\Token\\JWT::encodeASNLength", "doc": "&quot;Encodes a length according to ASN.1 encoding rules&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_extractRSAKey", "name": "eureka2\\OAuth\\Token\\JWT::extractRSAKey", "doc": "&quot;Extracts the JSON Web Key (JWK) for RSA signature from a JSON Web Key Set (JWKS) and\nthe header of a JSON Web Token&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_createPemPublicKey", "name": "eureka2\\OAuth\\Token\\JWT::createPemPublicKey", "doc": "&quot;Creates a public key in PEM format from the given key which is extracted from a JSON Web Key Set (JWKS)&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_verifyRSASignature", "name": "eureka2\\OAuth\\Token\\JWT::verifyRSASignature", "doc": "&quot;Verifies the signature of a JSON Web Token using an RSA algorithm.&quot;"},
                    {"type": "Method", "fromName": "eureka2\\OAuth\\Token\\JWT", "fromLink": "eureka2/OAuth/Token/JWT.html", "link": "eureka2/OAuth/Token/JWT.html#method_verifyHMACsignature", "name": "eureka2\\OAuth\\Token\\JWT::verifyHMACsignature", "doc": "&quot;Verifies the signature of a JSON Web Token using an HMAC algorithm.&quot;"},
            
            
                                        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Sami = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },

        /** Add the left-nav tree to the site */
        injectApiTree: function(ele) {
            ele.html(treeHtml);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = $('body').attr('data-root-path');
        treeHtml = treeHtml.replace(/href="/g, 'href="' + rootPath);
        Sami.injectApiTree($('#api-tree'));
    });

    return root.Sami;
})(window);

$(function() {

    // Enable the version switcher
    $('#version-switcher').change(function() {
        window.location = $(this).val()
    });

    
        // Toggle left-nav divs on click
        $('#api-tree .hd span').click(function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    
    
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Sami.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    
});


